// Copyright (c) 2024 Daniel Krawisz
// Distributed under the MIT software license, see the accompanying
// file COPYING or http://www.opensource.org/licenses/mit-license.php.

#ifndef DATA_NET_ERROR
#define DATA_NET_ERROR

#include <data/net/JSON.hpp>
#include <data/net/URL.hpp>
#include <data/net/HTTP.hpp>

// https://www.rfc-editor.org/rfc/rfc7159
// https://www.rfc-editor.org/rfc/rfc7807

namespace data::net {

    struct error : JSON {
        bool valid () const;

        /*
        "type" (string) - A URI reference [RFC3986] that identifies the
        problem type.  This specification encourages that, when
        dereferenced, it provide human-readable documentation for the
        problem type (e.g., using HTML [W3C.REC-html5-20141028]).  When
        this member is not present, its value is assumed to be
        "about:blank". */
        URL type () const;

        /*
        "title" (string) - A short, human-readable summary of the problem
        type.  It SHOULD NOT change from occurrence to occurrence of the
        problem, except for purposes of localization (e.g., using
        proactive content negotiation; see [RFC7231], Section 3.4). */
        maybe<string> title () const;

        /*
        "status" (number) - The HTTP status code ([RFC7231], Section 6)
        generated by the origin server for this occurrence of the problem. */
        maybe<net::HTTP::status> status () const;

        /*
        "detail" (string) - A human-readable explanation specific to this
        occurrence of the problem. */
        maybe<string> detail () const;

        /*
        "instance" (string) - A URI reference that identifies the specific
        occurrence of the problem.  It may or may not yield further
        information if dereferenced. */
        maybe<URL> instance () const;

        error (JSON &&j) : JSON {j} {}
        error (const JSON &j) : JSON {j} {}

        // none of these fields are actually required.
        static bool valid (const JSON &j);
        static URL type (const JSON &);
        static maybe<string> title (const JSON &);
        static maybe<net::HTTP::status> status (const JSON &);
        static maybe<string> detail (const JSON &);
        static maybe<URL> instance (const JSON &);
    };

    bool inline error::valid () const {
        return valid (*this);
    }

    URL inline error::type () const {
        return type (*this);
    }

    maybe<string> inline error::title () const {
        return title (*this);
    }

    maybe<net::HTTP::status> inline error::status () const {
        return status (*this);
    }

    maybe<string> inline error::detail () const {
        return detail (*this);
    }

    maybe<URL> inline error::instance () const {
        return instance (*this);
    }

    bool inline error::valid (const JSON &j) {
        return j.is_object ();
    }

    URL inline error::type (const JSON &j) {
        return j.contains ("type") ? j["type"] : "about:blank";
    }

}

#endif
