add_library(sv OBJECT
utiltime.cpp
fs.cpp
crypto/chacha20.cpp
crypto/hmac_sha512.cpp
crypto/ripemd160.cpp
crypto/sha1.cpp
crypto/sha256.cpp
crypto/sha512.cpp
support/cleanse.cpp
support/lockedpool.cpp
)

target_include_directories(sv PUBLIC
$<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
$<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>)

if(CMAKE_C_BYTE_ORDER STREQUAL "BIG_ENDIAN")
target_compile_definitions(sv PUBLIC WORDS_BIGENDIAN)
else()
target_compile_definitions(sv PUBLIC WORDS_LITTLEENDIAN)
endif()
include(CheckCxxSymbolExists)
CHECK_INCLUDE_FILE("endian.h" HAVE_ENDIAN_H)
CHECK_INCLUDE_FILE("sys/endian.h" HAVE_SYS_ENDIAN_H)
CHECK_CXX_SYMBOL_EXISTS(htole16 "endian.h" HAVE_DECL_HTOLE16)
CHECK_CXX_SYMBOL_EXISTS(be16toh "endian.h" HAVE_DECL_BE16TOH)
CHECK_CXX_SYMBOL_EXISTS(le16toh "endian.h" HAVE_DECL_LE16TOH)
CHECK_CXX_SYMBOL_EXISTS(htobe32 "endian.h" HAVE_DECL_HTOBE32)
CHECK_CXX_SYMBOL_EXISTS(htole32 "endian.h" HAVE_DECL_HTOLE32)
CHECK_CXX_SYMBOL_EXISTS(be32toh "endian.h" HAVE_DECL_BE32TOH)
CHECK_CXX_SYMBOL_EXISTS(le32toh "endian.h" HAVE_DECL_LE32TOH)
CHECK_CXX_SYMBOL_EXISTS(htobe64 "endian.h" HAVE_DECL_HTOBE64)
CHECK_CXX_SYMBOL_EXISTS(htole64 "endian.h" HAVE_DECL_HTOLE64)
CHECK_CXX_SYMBOL_EXISTS(be64toh "endian.h" HAVE_DECL_BE64TOH)
CHECK_CXX_SYMBOL_EXISTS(le64toh "endian.h" HAVE_DECL_LE64TOH)
CHECK_CXX_SYMBOL_EXISTS(htobe16 "endian.h" HAVE_DECL_HTOBE16)
CHECK_CXX_SYMBOL_EXISTS(bswap_16 "byteswap.h" HAVE_DECL_HTOBE16)
#target_compile_definitions(sv PUBLIC HAVE_ENDIAN_H HAVE_SYS_ENDIAN_H HAVE_DECL_BSWAP_16 HAVE_DECL_HTOLE16 HAVE_DECL_BE16TOH HAVE_DECL_LE16TOH HAVE_DECL_HTOBE32 HAVE_DECL_HTOLE32 HAVE_DECL_BE32TOH HAVE_DECL_LE32TOH HAVE_DECL_HTOBE64 HAVE_DECL_HTOLE64 HAVE_DECL_BE64TOH HAVE_DECL_LE64TOH HAVE_DECL_HTOBE16)

target_link_libraries (
  sv
  PUBLIC
  Boost::boost
  Boost::chrono
)
include(GNUInstallDirs)
install(DIRECTORY
include/sv
  DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}
)
install(TARGETS sv
EXPORT svTargets ARCHIVE 
)