
#include "data/encoding/base64.hpp"
#include "gtest/gtest.h"
#include "gmock/gmock.h"
#include "gmock/gmock-matchers.h"

namespace data::encoding {

    TEST(Base64Test,TestFalse)
    {
        EXPECT_FALSE (encoding::base64::valid ("dGVzdFN0cmlZw==")) << "Shouldn't accept a string which isn't in the 4 boundary";
        EXPECT_FALSE(encoding::base64::valid ("dGVzdFN0c$luZw==")) << "Shouldn't allow invalid characters";
        EXPECT_FALSE(encoding::base64::valid("dGVzdFN0=cmluZw=")) << "Shouldn't allow = mid-string";
    }
    TEST (Base64Test, TestBase64) {

        std::string b64_string = "";
        EXPECT_TRUE (encoding::base64::valid (b64_string));
        EXPECT_TRUE (bool (encoding::base64::read (b64_string)));

        EXPECT_TRUE(encoding::base64::valid ("")) << "Should be true for empty string for Base64";

        data::bytes correct_output1 { string {"testString"}};
        EXPECT_EQ(correct_output1, encoding::base64::read ("dGVzdFN0cmluZw==").value()) << "Should output the correct result";
    }

}

