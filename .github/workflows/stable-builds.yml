name: Stable Builds
on:
  push:
    branches:
      - production
env:
  BUILD_TYPE: Release
jobs:
  prep:
    runs-on: ubuntu-latest
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - id: release
        uses: rymndhng/release-on-push-action@master
        with:
          bump_version_scheme: patch
          use_github_release_notes: true
      - name: Check Output Parameters
        run: |
          echo "Got tag name ${{ steps.release.outputs.tag_name }}"
          echo "Got release version ${{ steps.release.outputs.version }}"
    outputs:
      releaseVersion: ${{ steps.release.outputs.tag_name }}
  prep-conan:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [ 10,11 ]
    needs:
      - prep
    steps:
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        id: cache-conan
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.version }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Create default profile
        run: conan profile new default --detect
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile settings
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 default
          conan profile update env.CC=/usr/bin/gcc-${{ matrix.version }} default
          conan profile update env.CXX=/usr/bin/g++-${{ matrix.version }} default
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile version
        run: conan profile update settings.compiler.version=${{ matrix.version }} default
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Add conan remote
        run: |
          conan config set general.revisions_enabled=True
          conan remote add proofofwork https://conan.pow.co/artifactory/api/conan/conan
          conan user -p ${{ secrets.CONAN_USER_KEY }} -r proofofwork github

  upload:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [ 10,11 ]
    needs:
      - prep-conan
      - prep
    steps:
      - name: Install correct gcc
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.version }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: Run Conan
        run: |
          export CURRENT_VERSION="${{ needs.prep.outputs.releaseVersion }}"
          conan install . -r proofofwork
          conan create . proofofwork/stable
          conan upload data/${CURRENT_VERSION}@proofofwork/stable -r proofofwork --all
  release:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        version: [ 10,11 ]
    needs:
      - prep
      - prep-conan
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - name: Install correct gcc
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt install -y gcc-${{ matrix.version }} g++-${{ matrix.version }}
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ matrix.version }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: prepare release package
        run: |
          mkdir build
          cd build
          conan install .. -r=proofofwork
          cmake .. -DPACKAGE_TESTS=Off
          cmake --build .
          export CURRENT_VERSION="${{ needs.prep.outputs.releaseVersion }}"
          cp -r ../include ./
          tar -czvf "data-${CURRENT_VERSION}-gcc${{ matrix.version }}-linux.tar.gz" lib include
      - name: Upload release
        uses: svenstaro/upload-release-action@v2
        with:
          tag: ${{ needs.prep.outputs.releaseVersion }}
          file: build/data-${{ needs.prep.outputs.releaseVersion }}-gcc${{ matrix.version }}-linux.tar.gz
          asset_name: data-${{ needs.prep.outputs.releaseVersion }}-gcc${{ matrix.version }}-linux.tar.gz

