name: Data Builds
on:
  push:
    branches:
      - '*'
      - '*/*'
      - '**'
      - '!production'
env:
  BUILD_TYPE: Debug
jobs:
  prep:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        id: cache-conan
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Create profiles
        run: |
          conan profile new 10 --detect
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile settings
        run: |
          conan profile update settings.compiler.libcxx=libstdc++11 10
          conan profile update env.CC=/usr/bin/gcc-10 10
          conan profile update env.CXX=/usr/bin/g++-10 10
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Update profile version
        run: |
          conan profile update settings.compiler.version=10 10
      - if: ${{ steps.cache-conan.outputs.cache-hit != 'true' }}
        name: Add conan remote
        run: |
          conan config set general.revisions_enabled=True
          conan remote add proofofwork https://conan.pow.co/artifactory/api/conan/conan
          conan user -p ${{ secrets.CONAN_USER_KEY }} -r proofofwork github
  test:
    runs-on: ubuntu-latest
    needs:
      - prep
    steps:
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: run tests
        run: |
          mkdir test_build
          cd test_build
          conan install .. -r=proofofwork -pr=10 -pr:b=10
          CC=/usr/bin/gcc-10 CXX=/usr/bin/g++-10 cmake .. -DPACKAGE_TESTS=ON
          CC=/usr/bin/gcc-10 CXX=/usr/bin/g++-10 cmake --build .
          cd bin
          for f in test*; do "./$f" ; done
  upload:
    runs-on: ubuntu-latest
    needs:
      - test
    steps:
      - name: Install correct gcc
        run: |
          sudo add-apt-repository -y ppa:ubuntu-toolchain-r/test
          sudo apt install -y gcc-10 g++-10
      - uses: actions/checkout@v2
      - name: Get Conan
        uses: turtlebrowser/get-conan@v1.0
      - name: Cache Conan packages
        uses: actions/cache@v3
        env:
          cache-name: cache-conan
        with:
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/conanfile.py') }}
          path: |
            ~/.conan/
      - name: Run Conan
        run: |
          export CURRENT_VERSION=`git rev-parse --short HEAD`
          VERBOSE=1 CXX=/usr/bin/g++-10 CC=/usr/bin/gcc-10 conan create . proofofwork/unstable -pr=10 -pr:b=10
          conan upload data/${CURRENT_VERSION}@proofofwork/unstable -r proofofwork --all